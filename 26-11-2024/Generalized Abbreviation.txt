With the growing trend of shorthand writing, 
people often replace parts of a word with their lengths to create short-forms. 
A valid short-form can be created by replacing non-overlapping and non-adjacent substrings with their respective lengths.

You are given a word as input. 
Your task is to generate all possible short-forms of the given word and return them in lexicographical order.

Input Format:
--------------
Line-1: A single string W representing the word.

Output Format:
---------------
A list of strings representing all possible short-forms of the word W in lexicographical order.

Constraints:
-------------
1 ≤ len(W) ≤ 10
The word W consists of lowercase English letters only.

Sample Input-1:
---------------
kmit

Sample Output-1:
----------------
[1m1t, 1m2, 1mi1, 1mit, 2i1, 2it, 3t, 4, k1i1, k1it, k2t, k3, km1t, km2, kmi1, kmit]


Sample Input-2:
---------------
cse

Sample Output-2:
----------------
[1s1, 1se, 2e, 3, c1e, c2, cs1, cse]

import java.util.*;
class GenerateAbbreviations{
    public List<String> makeShortcutWords(String word)
    {
        List<String> ret = new ArrayList<String>();
        backtrack(ret, word, 0, "", 0);
        Collections.sort(ret);
        return ret;
    }
    private void backtrack(List<String> ret, String word, int pos, String cur, int count)
     {
        if(pos==word.length())
         {
             if(count > 0){
                cur += count;
             }
            ret.add(cur);
        }
        else{
            backtrack(ret, word, pos + 1, cur, count + 1);
            backtrack(ret, word, pos+1, cur + (count>0 ? count : "") + word.charAt(pos), 0);
        }
    }
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String s = sc.next();
        System.out.println(new GenerateAbbreviations().makeShortcutWords(s));
        
    }
}